for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red",title="Sampling distribution")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE)
g
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE, title="Sampling distribution")
g
?theme
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE)
g <- g + theme(title="Sampling distribution")
g
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE)
g <- g + theme(title=element_text("Sampling distribution"))
g
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE)
g <- g + theme(title=element_text("Sampling distribution"))
g
?theme
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE)
g <- g + theme(plot.title=element_text("Sampling distribution"))
g
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE)
g <- g + theme(plot.title="Sampling distribution")
g
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red",plot.title=element_text("Sampling distribution"))) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE)
g <- g + theme()
g
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red"),plot.title=element_text("Sampling distribution")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE)
g <- g + theme()
g
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE)
g <- g + theme(plot.title=element_text("Sampling distribution"))
g
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + theme(plot.title=element_text("Sampling distribution"))
g
?theme
### Produce the means of n_sim random samples of exponential distributions
sim_means = NULL ### reset the variable
for (i in 1 : n_sim) sim_means = c(sim_means, mean(rexp(n=n,rate=lambda))) ### add means of the sample distributions one by one
### Plot the distributions
library(ggplot2)
g <- ggplot(mapping=aes(x=sim_means,fill="red")) ### the newly created sampling distribution
g <- g + geom_density()
g <- g + geom_vline(xintercept=mean(sim_means),col="#800000") ### Add the mean of the sampling distribution as a vertical line
g <- g + geom_vline(xintercept=mean,col="blue", linetype=2) ### Add the theoretical mean as a vertical line
g <- g + guides(fill=FALSE) ### Do not show legend
g <- g + labs(title="Sampling distribution")
g
data("ToothGrowth")
head(ToothGrowth)
dim(ToothGrowth)
str(ToothGrowth)
unique(ToothGrowth$dose)
table(ToothGrowth)
?ToothGrowth
?ToothGrowth$description
a <- ?ToothGrowth
print(a)
a
?anova
anova(ToothGrowth)
str(ToothGrowth)
?cast
library(reshape)
?cast
ToothGrowth
library(reshape)
cast(data=ToothGrowth,supp+dose~len,fun.aggregate=mean)
library(reshape)
cast(data=ToothGrowth,formula=supp + dose ~ len,fun.aggregate=mean)
library(reshape)
cast(data=ToothGrowth,formula=supp ~ dose, value=len,fun.aggregate=mean)
library(reshape)
cast(data=ToothGrowth,formula=supp ~ dose, value="len",fun.aggregate=mean)
cast(data=ToothGrowth,formula=supp + dose ~ len, value="len",fun.aggregate=mean) ### show means per treatment type
cast(data=ToothGrowth,formula=supp ~ len, value="len",fun.aggregate=mean) ### show means per treatment type
cast(data=ToothGrowth,formula=... ~ len, value="len",fun.aggregate=mean) ### show means per treatment type
cast(data=ToothGrowth,formula=. ~ len, value="len",fun.aggregate=mean) ### show means per treatment type
cast(data=ToothGrowth,formula=. ~ dose, value="len",fun.aggregate=mean) ### show means per treatment type
cast(data=ToothGrowth,formula=. ~ supp, value="len",fun.aggregate=mean) ### show means per treatment type
boxplot(ToothGrowth$len)
?boxplot
boxplot(ToothGrowth$len,main="Boxplot of len variable")
range(ToothGrowth)
range(ToothGrowth$len)
iqr(ToothGrowth$len)
IQR(ToothGrowth$len)
?IQR
library(reshape)
cast(data=ToothGrowth,formula=supp ~ dose, value="len",fun.aggregate=mean) ### show means per treatment type
library(reshape)
cast(data=ToothGrowth,formula=supp ~ dose, value="len",fun=mean) ### show means per treatment type
cast(data=ToothGrowth,formula=. ~ supp, value="len",fun=mean) ### show means per treatment type
?dcast
library(reshape2)
?dcast
library(reshape2)
dcast(data=ToothGrowth,formula=supp ~ dose, value="len",fun=mean) ### show means per treatment type
library(reshape2)
dcast(data=ToothGrowth,formula=supp ~ dose, value.var="len",fun=mean) ### show means per treatment type
library(reshape2)
dcast(data=ToothGrowth,formula=supp ~ dose, value.var="len",fun.aggregate=mean) ### show means per treatment type
library(reshape)
library(reshape2)
library(reshape)
library(reshape2)
dcast(data=ToothGrowth,formula=supp ~ dose, value.var="len") ### show means per treatment type
vaggregate
?aggregate()
aggregate(data=ToothGrowth,formula=supp~dose,FUN=mean)
aggregate(data=ToothGrowth,formula=supp~dose,x=len,FUN=mean)
aggregate(data=ToothGrowth,formula=supp~dose,x=ToothGrowth$len,FUN=mean)
aggregate(data=ToothGrowth,formula=supp~dose,FUN=mean)
aggregate(data=ToothGrowth,formula=supp~dose,FUN=mean)
aggregate(data=ToothGrowth,formula=supp+dose~len,FUN=mean)
aggregate(data=ToothGrowth,x=supp+dose~len,FUN=mean)
aggregate(data=ToothGrowth,formula=supp+dose~len,FUN=mean)
aggregate(data=ToothGrowth,formula=supp+dose~len,mean)
aggregate(data=ToothGrowth,formula=supp+dose~len,FUN=mean)
aggregate(data=ToothGrowth,formula=supp+dose~len,FUN=mean,x=ToothGrowth)
aggregate(ToothGrowth,supp+dose~len,mean)
aggregate(ToothGrowth,supp+dose~len,mean,by=FUCKYOU)
class(ToothGrowth)
aggregate(data=ToothGrowth,.~len,mean
)
aggregate(data=ToothGrowth,.~len,mean)
aggregate(data=ToothGrowth,dose~len,mean)
aggregate(data=ToothGrowth,dose~supp,mean)
aggregate(data=ToothGrowth,len~dose+supp,mean)
aggregate(data=ToothGrowth,len~supp,mean)
aggregate(data=ToothGrowth,len~dose,mean) ### show means per dose
aggregate(data=ToothGrowth,len~dose+supp,mean) ### show means per treatment type
aggregate(data=ourdf,len~dose+supp,FUN="mean") ### show means per treatment type
ourdf <- ToothGrowth
aggregate(data=ourdf,len~dose+supp,FUN="mean") ### show means per treatment type
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
head(flines
)
substr(flines,1,1)
substr(flines[1],1,1)
substr(flines[1],1,1)='"'
substr(flines[1],1,1)=='"'
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
substr(flines[1],1,1)=='"'
substr(flines[1],1,1)=='/'
substr(flines[1],1,1)=='u'
flines[1]
fpat_start
fpat_start <- ',"'
fpat_start
startelementsB <- grep(pattern=fpat_start,x=flines)
startelements==startelementsB
startelementsB
startelements
fpat_start <- ',"*'
startelementsB <- grep(pattern=fpat_start,x=flines)
startelements==startelementsB
startelements
startelementsB
fpat_start <- ',"[^"]'
startelementsB <- grep(pattern=fpat_start,x=flines)
startelements==startelementsB
startelementsB
fpat_start <- ',{1}"[A-Z]'
startelementsB <- grep(pattern=fpat_start,x=flines)
startelementsB
fpat_start <- ',"{1}[A-Z]'
startelementsB <- grep(pattern=fpat_start,x=flines)
startelementsB
fpat_start <- ',"*{1}[A-Z]'
startelementsB <- grep(pattern=fpat_start,x=flines)
startelementsB
fpat_start <- ',"*{1}'
startelementsB <- grep(pattern=fpat_start,x=flines)
startelementsB
startelements==startelementsB
fpat_start <- '^"*{1}'
startelements <- grep(pattern=fpat_start,x=flines)
startelements
fpat_start <- '^["]{1}'
startelements <- grep(pattern=fpat_start,x=flines)
startelements
flines[6]
flines[5]
dir()
flines[1]
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
startelements
flines[1]
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
flines[1]
flines[2]
flines[3]
flines[4]
substr(flines,1,1)
flines
fpat_start <- ',{1}["]{1}'
startelements <- grep(pattern=fpat_start,x=flines)
startelements
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
flines[1]
flines[5]
flines[6]
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
startelements
endelements
flines[56]
flines[98]
flines[97]
flines[99]
flines[95]
flines[96]
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
endelements
flines[95]
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
startelements
endelements
flines[8]
flines[9]
max(c(1,2))
max(c(1,2,4))
tmp_counts <- max(c(length(startelements),length(endelements)))
tmp_counts
flines[9]
tmp_nxt <- flines[9]
grep(pattern=fpat_start,x=tmp_nxt)
grep(pattern=fpat_end,x=tmp_nxt)
grep(pattern='[,]{1}["]{1}',x=tmp_nxt)
grep(pattern=''^"[,]{1}["]{1}',x=tmp_nxt)
grep(pattern=''^"*[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"*[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[A-Z][,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^".[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"*.[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"',x=tmp_nxt)
grep(pattern='^"(.)[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"(...)[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^" [,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"*[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"*.[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[*.][,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[.][,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[A-Z].[,]{1}["]{1}',x=tmp_nxt)
tmp_nxt
grep(pattern='^"[A-Z]',x=tmp_nxt)
grep(pattern='.[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[A-Z].[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[A-Z]+.[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[A-Z][,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[.]*[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[A-Za-z]*[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"(?...)[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"(?:...)[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"(...)[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[.][,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[.]',x=tmp_nxt)
grep(pattern='^"[.]*',x=tmp_nxt)
grep(pattern='^"[.]*[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='[.]*[,]{1}["]{1}',x=tmp_nxt)
grep(pattern='[.][,]{1}["]{1}',x=tmp_nxt)
grep(pattern='^"[A-Z]',x=tmp_nxt)
grep(pattern='[.][,]{1}["]{1}',x=tmp_nxt)
as.numeric(grep(pattern='[.][,]{1}["]{1}',x=tmp_nxt))
is.na(grep(pattern='[.][,]{1}["]{1}',x=tmp_nxt))
grep(pattern='[.][,]{1}["]{1}',x=tmp_nxt)+1
grep(pattern='[.][,]{1}["]{1}',x=tmp_nxt)+1111
grep(pattern='^"[A-Z]',x=tmp_nxt)
grep(pattern='^"[A-Z]',x=tmp_nxt)+2
if (length(startelements)!=length(endelements)) {
for (i in 1:tmp_counts-1) {
if(endelements[i]+1>startelements[i+1]) { #If endelement is below or equal to the next starting element, there is a missing endelement
tmp_nxt <- flines[startelements[i+1]] #Get the next starting element
tmp_eval <- 0
if(grep(pattern='[,]{1}["]{1}',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(grep(pattern='^"[A-Z]',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(tmp_eval==2) { #the next starting element is REALLY a starting element
oldendelements <- endelements
endelements[1:i-1] <- oldendelements [1:i-1]
endelements[i] <- startelements[i+1]-1 # the element before the confirmed starting element SHOULD be the ending elemnet
endelements[i+1:length(oldendelements)+1] <- oldendelements[i:length(oldendelements)]
}
}
}
}
endelements
endelements[i]
endelements[1]
endelements[1]+1
startelements[1+1]
tmp_counts
if (length(startelements)!=length(endelements)) {
for (i in 1:tmp_counts-1) {
if(endelements[i]+1>startelements[i+1]) { #If endelement is below or equal to the next starting element, there is a missing endelement
cat(i)
tmp_nxt <- flines[startelements[i+1]] #Get the next starting element
tmp_eval <- 0
if(grep(pattern='[,]{1}["]{1}',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(grep(pattern='^"[A-Z]',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(tmp_eval==2) { #the next starting element is REALLY a starting element
oldendelements <- endelements
endelements[1:i-1] <- oldendelements [1:i-1]
endelements[i] <- startelements[i+1]-1 # the element before the confirmed starting element SHOULD be the ending elemnet
endelements[i+1:length(oldendelements)+1] <- oldendelements[i:length(oldendelements)]
}
}
}
}
if (length(startelements)!=length(endelements)) {
for (i in 1:tmp_counts-1) {
cat(i)
if(endelements[i]+1>startelements[i+1]) { #If endelement is below or equal to the next starting element, there is a missing endelement
tmp_nxt <- flines[startelements[i+1]] #Get the next starting element
tmp_eval <- 0
if(grep(pattern='[,]{1}["]{1}',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(grep(pattern='^"[A-Z]',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(tmp_eval==2) { #the next starting element is REALLY a starting element
oldendelements <- endelements
endelements[1:i-1] <- oldendelements [1:i-1]
endelements[i] <- startelements[i+1]-1 # the element before the confirmed starting element SHOULD be the ending elemnet
endelements[i+1:length(oldendelements)+1] <- oldendelements[i:length(oldendelements)]
}
}
}
}
if (length(startelements)!=length(endelements)) {
for (i in 1:(tmp_counts-1)) {
cat(i)
if(endelements[i]+1>startelements[i+1]) { #If endelement is below or equal to the next starting element, there is a missing endelement
tmp_nxt <- flines[startelements[i+1]] #Get the next starting element
tmp_eval <- 0
if(grep(pattern='[,]{1}["]{1}',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(grep(pattern='^"[A-Z]',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(tmp_eval==2) { #the next starting element is REALLY a starting element
oldendelements <- endelements
endelements[1:i-1] <- oldendelements [1:i-1]
endelements[i] <- startelements[i+1]-1 # the element before the confirmed starting element SHOULD be the ending elemnet
endelements[i+1:length(oldendelements)+1] <- oldendelements[i:length(oldendelements)]
}
}
}
}
tmp_counts <- max(c(length(startelements),length(endelements)))
# Check whether equal
if (length(startelements)!=length(endelements)) {
for (i in 1:(tmp_counts-1)) {
cat(i)
if(endelements[i]+1>startelements[i+1]) { #If endelement is below or equal to the next starting element, there is a missing endelement
tmp_nxt <- flines[startelements[i+1]] #Get the next starting element
tmp_eval <- 0
if(grep(pattern='[,]{1}["]{1}',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(grep(pattern='^"[A-Z]',x=tmp_nxt)==1) tmp_eval <- tmp_eval + 1
if(tmp_eval==2) { #the next starting element is REALLY a starting element
oldendelements <- endelements
endelements[1:(i-1)] <- oldendelements [1:(i-1)]
endelements[i] <- startelements[i+1]-1 # the element before the confirmed starting element SHOULD be the ending elemnet
endelements[(i+1):length(oldendelements)+1] <- oldendelements[i:length(oldendelements)]
}
}
}
}
length(startelements)!=length(endelements)
endelements
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
startelements
endelements
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
endelements[57]
endelements[58]
startelements[58]
startelements[57]
startelements
endelements
flines[95]
flines[98]
flines[96]
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
tmp_nxt
grep(pattern='[,]{1}["]{1}',x=tmp_nxt)
is.na(grep(pattern='[,]{1}["]{1}',x=tmp_nxt))
length(grep(pattern='[,]{1}["]{1}',x=tmp_nxt))
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
startelements
endelements
i
tmp_counts
max(c(length(startelements),length(endelements)))
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
i
tmp_counts
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
source('C:/Users/Lucien/OneDrive/HARDDRIVE/LDS/NotAnEngineer/Flashcards/studyblue_csv_to_rda.R')
